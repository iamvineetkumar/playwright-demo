name: Playwright Tests

on:
  push:
    branches: [dev]

jobs:
  playwright-tests:
    timeout-minutes: 4
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Playwright and dependencies
        run: |
          npm install playwright
          # Add any other dependencies needed for your tests

      - name: Load and Parse JSON File
        id: load_json_data
        run: |
          testsJson=$(cat tests/test-case.json)
          echo "::set-output name=testsJson::$testsJson"
      - name: Install jq
        run: |
          wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x jq
          sudo mv jq /usr/local/bin
      - name: Calculate tests per shard
        id: calculate_tests_per_shard
        run: |
          testsJson="${{ steps.load_json_data.outputs.testsJson }}"
          totalTests=$(echo "$testsJson" | jq length)
          testsPerShard=$((totalTests / ${{ matrix.shardTotal }} + 1))
          echo "::set-output name=testsPerShard::$testsPerShard"

      - name: Run Playwright tests
        id: playwright_tests
        run: |
          testsJson="${{ steps.load_json_data.outputs.testsJson }}"
          shardIndex=${{ matrix.shardIndex }}
          testsPerShard=${{ steps.calculate_tests_per_shard.outputs.testsPerShard }}
          startIndex=$(( (shardIndex - 1) * testsPerShard ))
          endIndex=$(( startIndex + testsPerShard - 1 ))
          testsForShard=$(echo "$testsJson" | jq -r ".[$startIndex:$endIndex][]")

          echo "Shard tests for shard $shardIndex:"
          echo "$testsForShard"

          # Iterate over each test file and execute it
          for test in $testsForShard; do
            echo "Running test file: $test"
            npx playwright test "$test" --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} | tee executed_tests_shard_${{ matrix.shardIndex }}.txt
          done

      - name: Upload test reports
        uses: actions/upload-artifact@v2
        with:
          name: shard-${{ matrix.shardIndex }}-test-reports
          path: executed_tests_shard_${{ matrix.shardIndex }}.txt
